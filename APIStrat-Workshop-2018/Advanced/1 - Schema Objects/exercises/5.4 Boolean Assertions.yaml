# OpenAPI v3 Training Exercise

openapi: "3.0.0"
info:
  version: 1.0.0
  title: TaxBlaster API
  description: |
    # Exercise: Boolean Assertions
    
    Remember, JSON Schema is primarily a _validation language_. 
    Each schema is a set of constraints, and a value may conform
    to more than one schema. Boolean assertions validate 
    conformance to one or more schemas:
    * `allOf` asserts that the instance must validate
      independently against _each one_ of a list of subschemas. 
      
    * `anyOf` asserts that the instance must validate against
      _at least one_ of a list of subschemas. 

    * `oneOf` asserts that the instance must validate against
      _exactly one_ of a list of subschemas. 

    * `not` asserts that the instance does not conform to a
      given subschema.
      
    Try making the following changes:
      
    1. Modify the `taxDue` property of `Taxpayer` so it accepts
       _either_ a `number` or a `MissingValue`. 
       
    2. Create a new schema component called `AmendedTaxFiling`
       that is _both_ a `TaxFiling` and an `Amendment`. 

paths:

  /tax_payment/{id}:
    parameters:
    - name: id
      in: path
      description: Payment ID
      required: true
      schema:
        type: string
    get:
      description: Retrieve a single tax payment.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object

  /taxpayers:
    get:
      description: Retrieve the entire list of taxpayers.
      parameters:
      - name: minTaxDue
        in: query
        schema:
          type: number
        description: >
          Return only taxpayers with taxDue >= the specified value.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Taxpayers"
        default:
          description: >
            Unexpected error in processing the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /taxpayers/{id}:
    parameters:
    - description: ID of the individual taxpayer.
      name: id
      in: path
      schema:
        type: string
      required: true
    get:
      description: Retrieve an individual taxpayer.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Taxpayer"
        default:
          description: >
            Unexpected error in processing the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tax_filings:
    get:
      description: Retrieve all available tax filings
      parameters:
      - name: status
        in: query
        description: > 
          Return only tax filings with the specified tax filing status.
        required: true
        schema:
          type: string
          enum:
          - Draft
          - Submitted
          - Accepted
          - Audit_Pending        
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaxFilings"
        default:
          description: >
            Unexpected error in processing the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  
  /tax_filings/{id}:
    parameters:
    - name: id
      in: path
      description: ID of the Tax Filing
      required: true
      schema:
        type: string
    get:
      description: Retrieve an individual tax filing
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaxFiling"

components:
  schemas:

    TaxFiling:
      type: object
      required:
        - filingID  
      properties:
        filingID:
          type: string
        taxpayerID:
          type: string
        jurisdiction:
          type: string
        fileDate:
          type: string
          format: date
        isJointFiling:
          type: boolean
        filingStatus:
          $ref: "#/components/schemas/TaxFilingStatus"
    
    Amendment:
      description: a formal change to an existing document
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        amendedBy:
          type: string
        originalDocumentURL:
          type: string
        changeSummary:
          type: string 
        
    TaxFilingStatus:
      type: string
      enum:
      - Draft
      - Submitted
      - Accepted
      - Audit_Pending
          
    TaxFilings:
      type: array
      items:
        $ref: "#/components/schemas/TaxFiling"
  
    Taxpayer:
      type: object
      required:
      - taxpayerID
      properties:
        taxpayerID:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        maritalStatus:
          type: boolean
        taxDue:
          type: number
  
    MissingValue:
      description:
        An explanatory value given where the expected
        value is missing. 
      type: string
      enum:
      - "Not Available"
      - "Not Applicable"
      - "Not Meaningful"
      
    Taxpayers:
      type: array
      items:
        $ref: "#/components/schemas/Taxpayer"
        
    ErrorResponse:
      description: An error string returned from a bad response.
      type: object
      properties:
        errorMessage:
          type: string
        stackTrace:
          type: string
